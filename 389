class Solution(object):
    def findTheDifference(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        if len(s)==0:
            return t
        hashTable=[0]*26
        for i in s:
            temp= ord(i)-97
            hashTable[temp]-=1
        for j in t:
            temp= ord(j)-97
            hashTable[temp]+=1   
        for n,v in enumerate(hashTable):
            if v==1:
                result_char=n+97
                return chr(result_char)

   hashTable=[0]*26 这是用列表创建哈希表的方法
   列表确实只存储了每个字母的计数，而没有直接存储字母本身。
   列表的索引本身已经隐含了字母的信息。例如，索引 0 对应字母 'a'，索引 1 对应字母 'b'，依此类推
   hashTable = [None] * 100  # 假设键的范围是 0 到 99

# 插入键值对
def insert(key, value):
    hashTable[key] = value

# 查询键对应的值
def get(key):
    return hashTable[key]

# 示例
insert(10, "value10")
insert(20, "value20")

print(get(10))  # 输出: value10
print(get(20))  # 输出: value20

关键点，列表的每个索引直接对应一个键，而元素直接对应值
这种方式和我们这道题用到的ASCII码是一样的，把字母的ASCII码当作是索引，既键
元素出现的次数作为值。
insert(10, "value10") 将 "value10" 存储在 hashTable[10]。
insert(20, "value20") 将 "value20" 存储在 hashTable[20]。
get(10) 从 hashTable[10] 获取值 "value10"。

 ord(j)是将字母转换为ASCII码
 char（a）是将ASCII码转化为字母

 在用ASCII码构建字母的时候，比较常见的是把ASCII码-97，把字母a的索引转变为0

enumerate 是一个内置函数，用于在遍历列表（或其他可迭代对象）时同时获取索引和值。
它返回一个枚举对象，其中每个元素是一个元组，包含两个部分：
索引：当前元素的索引。
值：当前元素的值。

字典（dict）在 Python 中是一个键值对的集合。
当你使用迭代器遍历字典时，你可以选择迭代键、值或键值对。

my_dict = {"a": 10, "b": 20, "c": 30}
for key in my_dict:
    print(f"Key: {key}")

my_dict = {"a": 10, "b": 20, "c": 30}
for value in my_dict.values():
    print(f"Value: {value}")

my_dict = {"a": 10, "b": 20, "c": 30}
for key, value in my_dict.items():
    print(f"Key: {key}, Value: {value}")

直接遍历dict可以得到键 
遍历dict.values() 得到值 需要用.value()这个方法








 
